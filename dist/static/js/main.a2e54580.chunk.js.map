{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["shuffle","a","i","length","j","Math","floor","random","Spoiler","styled","p","difficulties","id","name","InnerContainer","div","optNames","generateMenuItems","items","map","item","MenuItem","key","value","decodeRec","obj","_","forEach","isString","atob","isObject","isArray","App","useState","categories","setCategories","selectedId","setSelectedId","selectedDiff","setSelectedDiff","questions","setQuestions","useEffect","fetch","result","json","jsonResult","console","log","trivia_categories","fetchData","fetchQuestion","difficulty","cat","url","newQs","results","question","qOpts","correct_answer","concat","incorrect_answers","newQ","opts","categoryMenuItems","difficultyMenuItems","renderedQuestions","reverse","Card","CardContent","Typography","variant","component","category","find","diff","unescape","Paper","elevation","List","opt","optI","ListItem","button","ListItemText","Container","fixed","InputLabel","Select","labelId","onChange","event","target","Fragment","Button","onClick","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","type","primary","main","secondary","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2e54580.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport Container from '@material-ui/core/Container';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport { Button, Card, CardContent, List, ListItem, ListItemText, Paper } from '@material-ui/core';\nimport _ from 'lodash';\n\nfunction shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nconst Spoiler = styled.p`\n    color: transparent;\n    background-color: white;\n\n    &:hover {\n        color: white;\n        background-color: transparent;\n    }\n`;\n\nconst difficulties = [\n    {\n        id: 'any',\n        name: 'Any Difficulty',\n    },\n    {\n        id: 'easy',\n        name: 'Easy',\n    },\n    {\n        id: 'medium',\n        name: 'Medium',\n    },\n    {\n        id: 'hard',\n        name: 'Hard',\n    },\n];\n\nconst InnerContainer = styled.div`\n    display: flex;\n\n    flex-direction: column;\n\n    width: 500px;\n\n    & > * {\n        margin-bottom: 1em;\n    }\n`;\n\nconst optNames = ['A', 'B', 'C', 'D'];\n\nconst generateMenuItems = (items) => {\n    return items.map((item) => {\n        return (\n            <MenuItem key={item.id} value={item.id}>{item.name}</MenuItem>\n        );\n    });\n};\n\nfunction decodeRec(obj) {\n    _.forEach(obj, (value, key) => {\n        if (_.isString(value)) {\n            obj[key] = atob(value);\n        }\n        else if (_.isObject(value) || _.isArray(value)) {\n            obj[key] = decodeRec(value);\n        }\n    });\n\n    return obj;\n}\n\nfunction App() {\n    const [categories, setCategories] = useState([]);\n    const [selectedId, setSelectedId] = useState('any');\n    const [selectedDiff, setSelectedDiff] = useState('any');\n    const [questions, setQuestions] = useState([]);\n    // const [sessionToken, setSessionToken] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await fetch('https://opentdb.com/api_category.php');\n\n            const jsonResult = await result.json();\n            console.log(jsonResult);\n\n            setCategories(jsonResult.trivia_categories);\n        };\n\n        fetchData();\n    }, []);\n\n    const fetchQuestion = async () => {\n        const difficulty = selectedDiff === 'any' ? '' : `&difficulty=${selectedDiff}`;\n        const cat = selectedId === 'any' ? '' : `&category=${selectedId}`;\n\n        const url = `https://opentdb.com/api.php?amount=1&type=multiple&encode=base64${cat}${difficulty}`\n        const result = await fetch(url);\n\n        let jsonResult = await result.json();\n\n        jsonResult = decodeRec(jsonResult);\n\n        console.log(jsonResult);\n\n        const newQs = jsonResult.results.map((question) => {\n            let qOpts = [question.correct_answer].concat(question.incorrect_answers);\n\n            console.log(qOpts);\n\n            qOpts = shuffle(qOpts);\n\n            const newQ = {\n                ...question,\n                opts: qOpts,\n            };\n\n            return {\n                url,\n                question: newQ,\n            };\n        });\n\n        setQuestions(questions.concat(newQs));\n    };\n\n    const anyCat = [{\n        id: 'any',\n        name: 'Any Category',\n    }];\n    const categoryMenuItems = generateMenuItems(anyCat.concat(categories));\n    const difficultyMenuItems = generateMenuItems(difficulties);\n\n    const renderCategories = () => (\n        <React.Fragment>\n            <InputLabel id=\"cats\">Category</InputLabel>\n            <Select labelId=\"cats\" value={selectedId} onChange={(event) => setSelectedId(event.target.value)}>\n                {categoryMenuItems}\n            </Select>\n        </React.Fragment>\n    );\n\n    const renderedQuestions = [...questions].reverse().map(({question, url}, i) => {\n        console.log(question);\n        return (\n            <Card key={i}>\n                <CardContent>\n                    <Typography variant=\"h4\" component=\"h4\">\n                        {question.category}\n                    </Typography>\n                    <Typography variant=\"subtitle1\" component=\"h2\">\n                        Difficulty: {difficulties.find((diff) => diff.id === question.difficulty).name}\n                    </Typography>\n                    <Typography variant=\"body1\" component=\"p\">\n                        {_.unescape(question.question)}\n                    </Typography>\n                    <Paper elevation={1}>\n                        <List>\n                            {question.opts.map((opt, optI) => {\n                                return (\n                                    <ListItem key={optI} button>\n                                        <ListItemText>\n                                            {optNames[optI]}{'). '}\n                                            {_.unescape(opt)}\n                                        </ListItemText>\n                                    </ListItem>\n                                );\n                            })}\n                        </List>\n                    </Paper>\n                        <Spoiler>{question.correct_answer}</Spoiler>\n                </CardContent>\n            </Card>\n        );\n    });\n\n    return (\n        <Container fixed>\n            {categories.length > 0 ? (\n                <InnerContainer>\n                    <InputLabel id=\"diff\">Diffuculty</InputLabel>\n                    <Select labelId=\"diff\" value={selectedDiff} onChange={(event) => setSelectedDiff(event.target.value)}>\n                        {difficultyMenuItems}\n                    </Select>\n                    {renderCategories()}\n                    <Button onClick={() => {\n                        fetchQuestion();\n                    }}\n                    >\n                        Get Question\n                    </Button>\n                    {renderedQuestions}\n                </InnerContainer>\n            ): null}\n        </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#1976d2',\n        },\n        secondary: {\n            main: '#ff6f00',\n        },\n  },\n});\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n    </ThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}